<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Bubble Float - A Calming Game</title>
    <style>
        /* --- CSS Custom Properties (Theme & Animation Variables) --- */
        /* These variables make it easy to tune the game's look, feel, and performance. */
        :root {
            /* Base Color Palette */
            --color-bg-start: #1b2735;
            --color-bg-end: #090a0f;
            --color-mute-button: rgba(255, 255, 255, 0.6);

            /* Bubble Animation Parameters (controlled by JS) */
            --bubble-size: 50px;
            --bubble-float-duration: 10s;
            --bubble-horizontal-drift: 0px;
            --bubble-rotation: 0deg;
            --bubble-wobble-duration: 3s; /* New: For wobble effect */
            
            /* Bubble Color Parameters (controlled by JS for variety) */
            --bubble-color-main: rgba(230, 245, 255, 0.7);
            --bubble-color-glow: rgba(200, 230, 255, 0.5);
            --bubble-color-highlight: rgba(255, 255, 255, 0.9);
        }

        /* --- Base Styles & Layout --- */
        html, body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background-color: var(--color-bg-end); /* Fallback background */
        }

        /* --- Game Container --- */
        #game-container {
            width: 100%;
            height: 100%;
            background: linear-gradient(170deg, var(--color-bg-start), var(--color-bg-end));
            position: relative;
            cursor: default;
            user-select: none;
            touch-action: none;
        }

        /* --- Aurora Effect --- */
        /* These bands create a soft, shifting aurora in the background for a more dynamic and calming atmosphere. */
        .aurora {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            z-index: 1;
        }

        .aurora-band {
            position: absolute;
            width: 300%;
            height: 200%;
            opacity: 0.15;
            filter: blur(100px);
            border-radius: 50%;
            will-change: transform, opacity;
        }

        .aurora-band:nth-child(1) {
            background: radial-gradient(circle, #5bdeff, transparent 60%);
            animation: move-aurora-1 45s linear infinite alternate;
        }
        .aurora-band:nth-child(2) {
            background: radial-gradient(circle, #ff5bde, transparent 60%);
            animation: move-aurora-2 55s linear infinite alternate;
        }

        @keyframes move-aurora-1 {
            from { transform: translate(-50%, -50%) rotate(0deg); }
            to { transform: translate(-40%, -60%) rotate(180deg); }
        }
        @keyframes move-aurora-2 {
            from { transform: translate(-50%, -50%) rotate(0deg); }
            to { transform: translate(-60%, -40%) rotate(-180deg); }
        }

        /* --- Bubble Styles --- */
        .bubble {
            position: absolute;
            z-index: 10;
            width: var(--bubble-size);
            height: var(--bubble-size);
            background: radial-gradient(circle at 35% 35%, var(--bubble-color-highlight), var(--bubble-color-main));
            border-radius: 50%;
            box-shadow: 0 0 10px var(--bubble-color-glow), inset 0 0 5px rgba(255, 255, 255, 0.5);
            pointer-events: none;
            will-change: transform, opacity;
            /* New: Added 'wobble' animation for more natural movement */
            animation: 
                float-up var(--bubble-float-duration) linear forwards,
                shimmer 3s ease-in-out infinite alternate,
                wobble var(--bubble-wobble-duration) ease-in-out infinite alternate;
        }
        
        .bubble.pop {
            /* When popping, only the pop animation should run */
            animation: pop-effect 0.3s ease-out forwards;
        }

        /* --- Sparkle Effect on Pop --- */
        .sparkle {
            position: absolute;
            z-index: 20;
            width: 8px;
            height: 8px;
            background-color: var(--bubble-color-highlight);
            border-radius: 50%;
            pointer-events: none;
            will-change: transform, opacity;
            animation: sparkle-burst 0.5s ease-out forwards;
        }
        
        /* --- Animations --- */
        @keyframes float-up {
            from {
                /* The 'translateY(0)' is combined with the 'wobble' transform */
                transform: translateY(0) rotate(0);
                opacity: 1;
            }
            to {
                transform: translateY(-120vh) rotate(var(--bubble-rotation));
                opacity: 0.5;
            }
        }
        
        /* New: Wobble animation for side-to-side movement */
        @keyframes wobble {
            from { transform: translateX(0); }
            to { transform: translateX(var(--bubble-horizontal-drift)); }
        }

        @keyframes shimmer {
            from { box-shadow: 0 0 10px var(--bubble-color-glow), inset 0 0 5px rgba(255, 255, 255, 0.5); }
            to { box-shadow: 0 0 20px var(--bubble-color-glow), inset 0 0 8px rgba(255, 255, 255, 0.5); }
        }

        @keyframes pop-effect {
            from {
                transform: scale(1);
                opacity: 1;
            }
            to {
                transform: scale(1.2);
                opacity: 0;
            }
        }

        @keyframes sparkle-burst {
            from {
                transform: translate(0, 0) scale(1);
                opacity: 1;
            }
            to {
                /* The final transform is set by JS for a random direction */
                opacity: 0;
            }
        }
        
        /* --- Mute Button --- */
        #mute-toggle {
            position: absolute;
            z-index: 100;
            bottom: 20px;
            right: 20px;
            width: 44px;
            height: 44px;
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            -webkit-tap-highlight-color: transparent;
        }

        #mute-toggle svg {
            width: 24px;
            height: 24px;
            fill: var(--color-mute-button);
        }

        #mute-toggle .icon-unmuted { display: block; }
        #mute-toggle .icon-muted { display: none; }
        #mute-toggle.muted .icon-unmuted { display: none; }
        #mute-toggle.muted .icon-muted { display: block; }
        
        /* --- Accessibility --- */
        @media (prefers-reduced-motion: reduce) {
            .bubble, .aurora-band {
                animation-duration: 1s !important;
                animation-iteration-count: 1;
            }
        }
    </style>
</head>
<body>
    <div id="game-container">
        <div class="aurora">
            <div class="aurora-band"></div>
            <div class="aurora-band"></div>
        </div>
    </div>
    
    <div id="mute-toggle" role="button" aria-label="Toggle Sound">
        <svg class="icon-unmuted" viewBox="0 0 24 24"><path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"></path></svg>
        <svg class="icon-muted" viewBox="0 0 24 24"><path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"></path></svg>
    </div>

    <script>
        // --- Configuration Constants ---
        const MAX_BUBBLES = 60;
        const LONG_PRESS_THRESHOLD = 500;
        const POP_ANIMATION_DURATION = 300; // ms, matches CSS animation

        const NORMAL_BUBBLE_SIZE_MIN = 24;
        const NORMAL_BUBBLE_SIZE_MAX = 64;
        const LARGE_BUBBLE_SIZE_MIN = 80;
        const LARGE_BUBBLE_SIZE_MAX = 140;

        const NORMAL_FLOAT_DURATION_MIN = 6;
        const NORMAL_FLOAT_DURATION_MAX = 12;
        const LARGE_FLOAT_DURATION_MIN = 10;
        const LARGE_FLOAT_DURATION_MAX = 18;

        const COLOR_PALETTES = [
            { main: 'rgba(100, 180, 255, 0.7)', glow: 'rgba(80, 160, 255, 0.5)', highlight: 'rgba(220, 240, 255, 0.9)' },
            { main: 'rgba(255, 170, 100, 0.7)', glow: 'rgba(255, 150, 80, 0.5)', highlight: 'rgba(255, 230, 210, 0.9)' },
            { main: 'rgba(100, 220, 150, 0.7)', glow: 'rgba(80, 200, 130, 0.5)', highlight: 'rgba(210, 255, 220, 0.9)' },
            { main: 'rgba(180, 140, 255, 0.7)', glow: 'rgba(160, 120, 255, 0.5)', highlight: 'rgba(230, 220, 255, 0.9)' }
        ];

        // --- DOM Elements & Game State ---
        const gameContainer = document.getElementById('game-container');
        const muteToggle = document.getElementById('mute-toggle');
        
        let activeBubbles = 0;
        let longPressTimer = null;
        let audioContext;
        let isAudioInitialized = false;
        let isMuted = false;

        // --- Audio Handling ---
        function initAudio() {
            if (isAudioInitialized) return;
            try {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                isAudioInitialized = true;
            } catch (e) { console.error("Web Audio API is not supported."); }
        }

        function playPopSound() {
            if (!isAudioInitialized || !audioContext || isMuted) return;
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            const now = audioContext.currentTime;
            oscillator.type = 'sine';
            oscillator.frequency.setValueAtTime(440, now);
            gainNode.gain.setValueAtTime(0.2, now);
            gainNode.gain.exponentialRampToValueAtTime(0.001, now + 0.1);
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            oscillator.start(now);
            oscillator.stop(now + 0.1);
        }

        // --- Sparkle Effect ---
        function createSparkles(x, y, colors) {
            for (let i = 0; i < 5; i++) {
                const sparkle = document.createElement('div');
                sparkle.className = 'sparkle';
                sparkle.style.left = `${x}px`;
                sparkle.style.top = `${y}px`;
                sparkle.style.setProperty('--bubble-color-highlight', colors.highlight);

                const angle = Math.random() * Math.PI * 2;
                const distance = Math.random() * 30 + 10;
                const endX = Math.cos(angle) * distance;
                const endY = Math.sin(angle) * distance;
                
                sparkle.style.setProperty('transform', `translate(${endX}px, ${endY}px) scale(0)`);

                gameContainer.appendChild(sparkle);
                sparkle.addEventListener('animationend', () => sparkle.remove(), { once: true });
            }
        }

        // --- Bubble Creation & Management ---
        function spawnBubble(x, y, isLarge) {
            if (activeBubbles >= MAX_BUBBLES) return;
            activeBubbles++;

            const bubble = document.createElement('div');
            bubble.className = 'bubble';

            const size = isLarge 
                ? Math.random() * (LARGE_BUBBLE_SIZE_MAX - LARGE_BUBBLE_SIZE_MIN) + LARGE_BUBBLE_SIZE_MIN
                : Math.random() * (NORMAL_BUBBLE_SIZE_MAX - NORMAL_BUBBLE_SIZE_MIN) + NORMAL_BUBBLE_SIZE_MIN;
            
            const duration = isLarge
                ? Math.random() * (LARGE_FLOAT_DURATION_MAX - LARGE_FLOAT_DURATION_MIN) + LARGE_FLOAT_DURATION_MIN
                : Math.random() * (NORMAL_FLOAT_DURATION_MAX - NORMAL_FLOAT_DURATION_MIN) + NORMAL_FLOAT_DURATION_MIN;
            
            const horizontalDrift = (Math.random() - 0.5) * 100;
            const rotation = (Math.random() - 0.5) * 90;
            const wobbleDuration = Math.random() * 2 + 2; // Randomize wobble between 2-4 seconds

            const colors = COLOR_PALETTES[Math.floor(Math.random() * COLOR_PALETTES.length)];
            
            // Set all CSS variables for this specific bubble
            bubble.style.setProperty('--bubble-color-main', colors.main);
            bubble.style.setProperty('--bubble-color-glow', colors.glow);
            bubble.style.setProperty('--bubble-color-highlight', colors.highlight);
            bubble.style.left = `${x - size / 2}px`;
            bubble.style.top = `${y - size / 2}px`;
            bubble.style.setProperty('--bubble-size', `${size}px`);
            bubble.style.setProperty('--bubble-float-duration', `${duration}s`);
            bubble.style.setProperty('--bubble-horizontal-drift', `${horizontalDrift}px`);
            bubble.style.setProperty('--bubble-rotation', `${rotation}deg`);
            bubble.style.setProperty('--bubble-wobble-duration', `${wobbleDuration}s`);

            gameContainer.appendChild(bubble);

            // --- Sound & Pop Logic (FIXED) ---
            // This timer is now set to trigger the pop *just before* the float animation finishes.
            // This syncs the sound and visual pop effect with the moment the bubble reaches the top edge of the screen,
            // rather than waiting for it to travel far off-screen.
            const popTime = (duration * 1000) - POP_ANIMATION_DURATION;

            setTimeout(() => {
                const rect = bubble.getBoundingClientRect();
                playPopSound();
                createSparkles(rect.left + rect.width / 2, rect.top + rect.height / 2, colors);
                
                bubble.classList.add('pop');
                
                // Final cleanup after the pop animation finishes.
                bubble.addEventListener('animationend', () => {
                    bubble.remove();
                    activeBubbles--;
                }, { once: true });

            }, popTime);
        }

        // --- Input Event Handling ---
        function handlePointerDown(e) {
            initAudio();
            if (longPressTimer) clearTimeout(longPressTimer);
            longPressTimer = setTimeout(() => {
                spawnBubble(e.clientX, e.clientY, true);
                longPressTimer = null;
            }, LONG_PRESS_THRESHOLD);
        }

        function handlePointerUp(e) {
            if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
                spawnBubble(e.clientX, e.clientY, false);
            }
        }
        
        function handlePointerCancel() {
             if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
        }

        gameContainer.addEventListener('pointerdown', handlePointerDown);
        gameContainer.addEventListener('pointerup', handlePointerUp);
        gameContainer.addEventListener('pointerleave', handlePointerCancel);
        gameContainer.addEventListener('pointercancel', handlePointerCancel);
        
        muteToggle.addEventListener('click', () => {
            isMuted = !isMuted;
            muteToggle.classList.toggle('muted', isMuted);
        });

    </script>
</body>
</html>

