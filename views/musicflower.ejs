<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Pulse Garden - A Calming Game</title>
    <style>
        /* --- CSS Custom Properties (Theme & Animation Variables) --- */
        :root {
            --bg-hue: 270; /* Starting hue (lavender) */
            --color-bg-start: hsl(var(--bg-hue), 60%, 92%);
            --color-bg-end: hsl(var(--bg-hue), 70%, 85%);
            --color-petal: rgba(255, 255, 255, 0.8);
            --color-petal-shadow: rgba(100, 80, 120, 0.15);
            --color-pulse: rgba(255, 255, 255, 0.7);
            --color-firefly: rgba(255, 255, 200, 0.8);
        }

        /* --- Base Styles & Layout --- */
        html, body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background-color: var(--color-bg-end); /* Fallback */
        }

        /* --- Game Container --- */
        #game-container {
            width: 100%;
            height: 100%;
            position: relative;
            cursor: pointer;
            user-select: none;
            touch-action: none; /* Prevents scrolling/zooming on mobile */
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(170deg, var(--color-bg-start), var(--color-bg-end));
            transition: background 0.5s ease-out; /* Smooth transition for color shifts */
        }

        /* --- New: Firefly Container --- */
        /* This container holds the ambient particles, keeping them behind the flower. */
        #firefly-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }

        /* --- New: Firefly Styles --- */
        .firefly {
            position: absolute;
            width: 4px;
            height: 4px;
            background-color: var(--color-firefly);
            border-radius: 50%;
            box-shadow: 0 0 8px 2px var(--color-firefly);
            will-change: transform;
            /* The 'drift' animation makes them float around */
            animation: drift 20s infinite alternate ease-in-out;
            /* A smooth transition is used to recover from being pushed by a pulse */
            transition: transform 1.5s ease-out;
        }

        /* --- Flower Styles --- */
        #flower {
            position: relative;
            width: 100px;
            height: 100px;
            transform-origin: center center;
            transition: transform 0.8s cubic-bezier(0.25, 1, 0.5, 1);
            will-change: transform;
            z-index: 10;
            /* Added to contain the new center element */
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #flower.exhale {
            transition: transform 8s ease-out;
        }

        /* New: Flower Center Element */
        #flower-center {
            position: absolute;
            width: 25%;
            height: 25%;
            background-color: var(--color-firefly);
            border-radius: 50%;
            box-shadow: 0 0 12px 4px var(--color-firefly);
            transition: box-shadow 0.5s ease-out;
            will-change: box-shadow;
        }

        /* New: Class to trigger the glow animation */
        .glow-active {
            animation: glow 0.5s ease-out;
        }

        .petal {
            position: absolute;
            width: 100%;
            height: 100%;
            background-color: var(--color-petal);
            border-radius: 50% 0;
            box-shadow: 0 5px 15px var(--color-petal-shadow);
            transform-origin: bottom left;
            transition: transform 0.8s cubic-bezier(0.25, 1, 0.5, 1);
            /* New: 'breathe' animation makes petals flutter gently */
            animation: breathe 7s infinite alternate ease-in-out;
        }

        /* New: Class to trigger the tap flutter animation */
        .flutter-active {
            animation: flutter 0.6s ease-out;
        }

        .petal:nth-child(1) { transform: rotate(0deg) skewX(20deg); }
        .petal:nth-child(2) { transform: rotate(45deg) skewX(20deg); animation-delay: -1s; }
        .petal:nth-child(3) { transform: rotate(90deg) skewX(20deg); animation-delay: -2s; }
        .petal:nth-child(4) { transform: rotate(135deg) skewX(20deg); animation-delay: -3s; }
        .petal:nth-child(5) { transform: rotate(180deg) skewX(20deg); animation-delay: -4s; }
        .petal:nth-child(6) { transform: rotate(225deg) skewX(20deg); animation-delay: -5s; }
        .petal:nth-child(7) { transform: rotate(270deg) skewX(20deg); animation-delay: -6s; }
        .petal:nth-child(8) { transform: rotate(315deg) skewX(20deg); animation-delay: -7s; }

        /* --- Pulse Effect (Updated Style) --- */
        /* The pulse is now a soft radial gradient for a more ethereal feel. */
        .pulse {
            position: absolute;
            width: 10px; /* Starts small */
            height: 10px;
            background: radial-gradient(circle, transparent 30%, var(--color-pulse) 50%, transparent 70%);
            border-radius: 50%;
            pointer-events: none;
            will-change: transform, opacity;
            transform: translate(-50%, -50%); /* Center on tap position */
            opacity: 0.8;
            animation: expand-pulse 1.5s cubic-bezier(0.1, 0.75, 0.5, 1) forwards;
        }
        
        /* --- Animations --- */
        @keyframes expand-pulse {
            from {
                width: 10px;
                height: 10px;
                opacity: 0.8;
            }
            to {
                width: 600px;
                height: 600px;
                opacity: 0;
            }
        }
        
        /* New: 'glow' animation for the flower's center on tap */
        @keyframes glow {
            0% { box-shadow: 0 0 12px 4px var(--color-firefly); }
            50% { box-shadow: 0 0 24px 10px var(--color-firefly); }
            100% { box-shadow: 0 0 12px 4px var(--color-firefly); }
        }

        /* New: 'flutter' animation for petals on tap */
        @keyframes flutter {
            0% { transform: rotate(var(--current-rotation)) skewX(20deg) scale(1); }
            30% { transform: rotate(var(--current-rotation)) skewX(25deg) scale(1.05); }
            60% { transform: rotate(var(--current-rotation)) skewX(15deg) scale(0.95); }
            100% { transform: rotate(var(--current-rotation)) skewX(20deg) scale(1); }
        }

        /* New: 'breathe' animation for petals */
        @keyframes breathe {
            from { transform-origin: bottom left; }
            50% { transform-origin: calc(50% - 10px) 50%; }
            to { transform-origin: bottom left; }
        }

        /* New: 'drift' animation for fireflies */
        @keyframes drift {
            0% { transform: translate(0, 0); }
            25% { transform: translate(40px, -30px); }
            50% { transform: translate(-20px, 20px); }
            75% { transform: translate(30px, 40px); }
            100% { transform: translate(0, 0); }
        }
        
        /* --- Accessibility --- */
        @media (prefers-reduced-motion: reduce) {
            #flower, .petal, .firefly, .pulse {
                animation-duration: 4s !important;
                transition-duration: 2s;
            }
        }
    </style>
</head>
<body>
    <div id="game-container">
        <div id="firefly-container"></div>
        <div id="flower">
            <div id="flower-center"></div>
            <div class="petal"></div>
            <div class="petal"></div>
            <div class="petal"></div>
            <div class="petal"></div>
            <div class="petal"></div>
            <div class="petal"></div>
            <div class="petal"></div>
            <div class="petal"></div>
        </div>
    </div>

    <script>
        // --- DOM Elements & Game State ---
        const gameContainer = document.getElementById('game-container');
        const fireflyContainer = document.getElementById('firefly-container');
        const flower = document.getElementById('flower');
        const flowerCenter = document.getElementById('flower-center'); // New element
        const petals = document.querySelectorAll('.petal');
        
        const NUM_FIREFLIES = 25;
        let flowerScale = 1.0;
        const growthFactor = 0.02;
        const maxPetalRotation = 10;
        let currentHue = 270;

        let audioContext;
        let isAudioInitialized = false;
        
        let exhaleTimer = null;

        // --- Audio Handling ---
        function initAudio() {
            if (isAudioInitialized) return;
            try {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                isAudioInitialized = true;
            } catch (e) {
                console.error("Web Audio API is not supported in this browser.");
            }
        }
        
        /**
         * Plays a chime sound whose pitch changes based on the flower's size AND tap position.
         * A larger flower produces a deeper, lower-pitched sound.
         * Tapping higher on the screen produces a higher-pitched sound.
         * @param {number} yPosition - The vertical coordinate of the user's tap.
         */
        function playChimeSound(yPosition) {
            if (!isAudioInitialized || !audioContext) return;

            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            const now = audioContext.currentTime;

            // --- New Sound Logic ---
            // The base frequency is now determined by the vertical tap position.
            const screenHeight = window.innerHeight;
            const pitchRatio = 1 - (yPosition / screenHeight); // Inverted: 1 at top, 0 at bottom

            const minFreq = 220; // A low A note
            const maxFreq = 880; // A high A note
            const positionalFreq = minFreq + (pitchRatio * (maxFreq - minFreq));

            // The frequency is further deepened as the flower grows.
            const currentFreq = Math.max(minFreq, positionalFreq / (1 + (flowerScale - 1) * 0.5));

            oscillator.type = 'sine';
            oscillator.frequency.setValueAtTime(currentFreq, now);
            gainNode.gain.setValueAtTime(0.3, now);
            gainNode.gain.exponentialRampToValueAtTime(0.001, now + 0.8);

            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);

            oscillator.start(now);
            oscillator.stop(now + 1);
        }
        
        // --- New: Firefly Logic ---
        /**
         * Populates the background with drifting firefly particles.
         */
        function createFireflies() {
            for (let i = 0; i < NUM_FIREFLIES; i++) {
                const firefly = document.createElement('div');
                firefly.className = 'firefly';
                // Randomize position and animation delay for a natural look
                firefly.style.top = `${Math.random() * 100}%`;
                firefly.style.left = `${Math.random() * 100}%`;
                firefly.style.animationDelay = `${Math.random() * -20}s`; // Start at different points in the animation
                firefly.style.animationDuration = `${Math.random() * 10 + 15}s`; // Vary speed
                fireflyContainer.appendChild(firefly);
            }
        }

        // --- Core Game Logic ---
        function createPulse(x, y) {
            const pulse = document.createElement('div');
            pulse.className = 'pulse';
            pulse.style.left = `${x}px`;
            pulse.style.top = `${y}px`;

            gameContainer.appendChild(pulse);
            pulse.addEventListener('animationend', () => pulse.remove(), { once: true });
        }

        function growFlower() {
            flowerScale += growthFactor;
            flower.style.transform = `scale(${flowerScale})`;
            
            petals.forEach((petal, index) => {
                const baseRotation = index * 45;
                const bloomRotation = Math.sin((flowerScale - 1) * Math.PI / 2) * maxPetalRotation;
                const currentRotation = baseRotation + bloomRotation;
                const currentTransform = `rotate(${currentRotation}deg) skewX(20deg)`;
                
                // Store the current rotation in a CSS variable for the flutter animation to use
                petal.style.setProperty('--current-rotation', `${currentRotation}deg`);
                petal.style.transform = currentTransform;
            });
        }
        
        function startExhaleTimer() {
            clearTimeout(exhaleTimer);
            exhaleTimer = setTimeout(() => {
                flowerScale = 1.0;
                flower.classList.add('exhale');
                flower.style.transform = `scale(${flowerScale})`;
                petals.forEach((petal, index) => {
                    const baseRotation = index * 45;
                    petal.style.setProperty('--current-rotation', `${baseRotation}deg`);
                    petal.style.transform = `rotate(${baseRotation}deg) skewX(20deg)`;
                });
            }, 8000);
        }
        
        /**
         * Pushes fireflies away from the point of interaction.
         */
        function scatterFireflies(x, y) {
            const allFireflies = document.querySelectorAll('.firefly');
            allFireflies.forEach(firefly => {
                const rect = firefly.getBoundingClientRect();
                const fx = rect.left + rect.width / 2;
                const fy = rect.top + rect.height / 2;

                const dx = fx - x;
                const dy = fy - y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                const pushStrength = 1 - Math.min(1, distance / 300); // Affects fireflies within 300px
                if (pushStrength <= 0) return;

                const pushX = (dx / distance) * 80 * pushStrength;
                const pushY = (dy / distance) * 80 * pushStrength;
                
                // We apply a temporary push transform on top of the existing drift animation
                const existingTransform = window.getComputedStyle(firefly).transform;
                firefly.style.transform = `translate(${pushX}px, ${pushY}px)`;
                
                // After a short delay, removing the transform will cause the firefly
                // to transition back smoothly to its original animation path.
                setTimeout(() => {
                    firefly.style.transform = '';
                }, 50);
            });
        }

        function handleInteraction(e) {
            // Get coordinates from the event (works for both touch and mouse)
            const x = e.clientX;
            const y = e.clientY;
            
            initAudio();
            // Pass the y-coordinate to the sound function to determine the pitch.
            playChimeSound(y);
            
            flower.classList.remove('exhale');

            // --- New Interaction Triggers ---
            // Trigger the glow on the flower's center
            flowerCenter.classList.add('glow-active');
            // Trigger the flutter on each petal
            petals.forEach(petal => petal.classList.add('flutter-active'));

            // Remove the animation classes after they finish to allow them to be re-triggered.
            // Using setTimeout is a simple and reliable way to do this.
            setTimeout(() => {
                flowerCenter.classList.remove('glow-active');
                petals.forEach(petal => petal.classList.remove('flutter-active'));
            }, 600); // Duration should match the longest animation (flutter)

            growFlower();
            createPulse(x, y);
            scatterFireflies(x, y); // New interaction
            
            currentHue = (currentHue + 3) % 360;
            document.documentElement.style.setProperty('--bg-hue', currentHue);
            
            startExhaleTimer();
        }

        // --- Event Listeners & Initialization ---
        gameContainer.addEventListener('pointerdown', handleInteraction);
        
        // Populate the garden on load
        createFireflies();
        startExhaleTimer();
    </script>
</body>
</html>



